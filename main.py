courses = ["Java-разработчик с нуля", "Fullstack-разработчик на Python", "Python-разработчик с нуля", "Frontend-разработчик с нуля"]
mentors = [
	["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
	["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
	["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
	["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
]
durations = [14, 20, 12, 20]

def find_longshort_courses(courses, durations):
    # В этот список будут добавляться словари-курсы
    courses_list = []
    # Допишите код, который генерирует словарь-курс с тремя ключами: "title", "mentors", "duration"
    for tittle, duration in zip(courses, durations):
        course_dict = {duration: tittle}
        courses_list.append(course_dict)

    # Найдите самое маленькое и самое большое значение длительности курса
    # Подсказка: используйте функции min и max для списка durations
    min_ = min(durations)
    max_ = max(durations)

    # Как видите, в duration встречаются одинаковые длительности курса. Допишите код, который это учитывает
    # Подсказка 1: найдите индексы, по которым в списке durations встречается самое маленькое и самое большое значение
    # Подсказка 2: не забудьте, что индекс можно удобно получить функцией enumerate
    maxes = []
    minis = []
    for i, j in enumerate(durations):
        if j == max_:
            maxes.append(i)
        elif j == min_:
            minis.append(i)

    # Соберите все названия самых коротких и самых длинных курсов
    # Так как курсов с одной длительностью может быть больше одного,
    # создайте список названий самых коротких (courses_min) и самых длинных (courses_max) курсов
    courses_min = []
    courses_max = []
    for id in minis:
        courses_min.append(courses_list[id][min_]) # Допишите код, который берёт по id нужный курс из courses_list и получает название курса из ключа "title"
    for id in maxes:
        courses_max.append(courses_list[id][max_]) # По аналогии допишите такой же код для курсов максимальной длительности
    a = ''.join(courses_min)
    b = ', '.join(courses_max)
    # Допишите конструкцию вывода результата. Можете использовать string.join()
    print(f'Самый короткий курс(ы): {a} - {min_} месяца(ев)')
    print(f'Самый длинный курс(ы): {b} - {max_} месяца(ев)')
    return f'Самый короткий курс(ы): {a} - {min_} месяца(ев)', f'Самый длинный курс(ы): {b} - {max_} месяца(ев)'

def sorted_courses(courses, durations):
    courses_list = []
    for course, mentor, duration in zip(courses, mentors, durations):
        course_dict = {"title": course, "mentors": mentor, "duration": duration}
        courses_list.append(course_dict)

    # С этого момента начинается выполнение задания 2
    # На входе у вас есть только список курсов courses_list. Об исходных данных, на базе которых он был сделан, вы ничего не знаете

    # Отсортируйте курсы по длительности (ключ duration), но при этом сохраните порядковый номер каждого курса из courses_list
    # Самое простое — создать новый словарь durations_dict с ключом — duration и значением — исходным номером курса в courses_list
    # Но у нас могут быть курсы с одинаковой длительностью, поэтому значение словаря — это список индексов, а не одно значение
    durations_dict = {}

    # Допишите код цикла так, чтобы в нём вы получали id курса. Подсказка: помните о функции enumerate
    for id, information in enumerate(courses_list):
        key = information["duration"]  # Получите значение из ключа duration
        # Допишите код ниже, который добавляет в словарь durations_dict по ключу key значения — id
        durations_dict[id] = key

    # Отсортируем словарь по ключам. Этот код уже готов, ничего менять не нужно
    # Здесь мы получаем пары ключ-значение в виде кортежа, и функция sorted выполняет сортировку по первым значениям кортежа — ключам
    durations_dict = dict(sorted(durations_dict.items(), key=lambda x: x[1]))

    # Выведите курсы, отсортированные по длительности
    # Допишите код цикла так, чтобы в нём вы получали из durations_dict ключи и значения
    return_string = ''
    for key, id in durations_dict.items():
        # Допишите код, который проходит по всему списку значений и выводит на экран текст вида «название курса — длительность»
        name = courses_list[key]["title"]
        return_string += f'{name} - {id} месяца(-ев)\n'
        print(f'{name} - {id} месяца(-ев)')
    return return_string

def compare_number_of_teachers_with_duration_of_courses(courses, mentors, durations):
    courses_list = []
    for course, mentor, duration in zip(courses, mentors, durations):
        course_dict = {"title": course, "mentors": mentor, "duration": duration}
        courses_list.append(course_dict)

    # С этого момента начинается выполнение задания 3.
    # На входе у вас есть только список курсов courses_list. Об исходных данных, на базе которых он был сделан, вы ничего не знаете

    # Подсказка: если связь между продолжительностью курсов и количеством преподавателей есть,
    # то после сортировки курсов по длительности и по количеству преподавателей курсы должны идти в одном и том же порядке
    # Проверьте себя: в этом задании курсы будут идти в таком порядке:
    # ["Python-разработчик с нуля", "Java-разработчик с нуля", "Fullstack-разработчик на Python", "Frontend-разработчик с нуля"] - по продолжительности,
    # ["Python-разработчик с нуля", "Frontend-разработчик с нуля", "Fullstack-разработчик на Python", "Java-разработчик с нуля"] - по количеству преподавателей
    # То есть ваш скрипт должен вывести "Связи нет", т.к. порядок оказался разным

    # Подсказка 1: для сравнения используйте не названия курсов, а их порядковые номера в списке courses_list
    # Подсказка 2: для сравнения сделайте пары [duration, index] и [mentors_count, index]
    # Допишите код ниже, который добавляет эти пары в список duration_index и mcount_index соответственно:
    duration_index = []
    mcount_index = []
    for index, course in enumerate(courses_list):
        duration_index.append([course["duration"], index])
        mcount_index.append([len(course["mentors"]), index])  # Напишите код по аналогии с duration_index

    # Отсортируйте список duration_index и список mcount_index
    # Подсказка: функция sort() будет сортировать по первому элементу (то есть по duration и по количеству преподавателей),
    # поэтому вы сразу получите правильный результат
    # Самостоятельно напишите код сортировки ниже:
    duration_index.sort()
    mcount_index.sort()
    # Теперь вам необходимо отделить отсортированные индексы. Перенесите их в отдельные списки:
    # indexes_d (индексы для сортировки курсов по длительности) и
    # indexes_m (индексы для сортировки курсов по количеству преподавателей)
    indexes_d = []
    indexes_m = []

    # Допишите код ниже:
    for id in duration_index:
        indexes_d.append(id[1])
    # Для indexes_m напишите аналогичный код самостоятельно:
    for id in mcount_index:
        indexes_m.append(id[1])
    # Сравните два получившихся списка индексов. Если они равны, то есть индексы идут в одинаковом порядке,
    # выведите "Связь есть", если не равны - выведите "Связи нет" и ниже - номера курсов по длительности, а потом - по количеству преподавателей
    # Допишите код ниже:
    if indexes_d == indexes_m:
        print("Связь есть")
        return True
    else:
        print("Связи нет")
        return False


if __name__ == '__main__':
    find_longshort_courses(courses, durations)
    print()
    sorted_courses(courses, durations)
    print()
    compare_number_of_teachers_with_duration_of_courses(courses, mentors, durations)